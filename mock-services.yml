
##
## Kubernetes configuration for k8s_host_db demo project.
##

## Start a service that makes the outside DB accessible in the cluster.
## See: https://stackoverflow.com/a/43477742
## If your database is inside the k8s cluster, you can skip this part.

kind: Service
apiVersion: v1
metadata:
  name: outside-db-service
  labels:
    app: k8s-host-db-demo
    part: outside-db
spec:
  ports:
      # this is the port inside the cluster
    - port: 3006
      # this is the port outside the cluster (3005 is value from README.md)
      targetPort: 3005

---
kind: Endpoints
apiVersion: v1
metadata:
  name: outside-db-endpoints
  labels:
    app: k8s-host-db-demo
    part: outside-db
subsets:
  #TODO @mark: how are IP and port determined?
  - addresses:
      - ip: 192.168.49.1
    ports:
      - port: 3005


## Start the mock database inside the cluster.
## If your database is outside the k8s cluster, you can skip this part.

---
apiVersion: v1
kind: Service
metadata:
  name: inside-db-service
  labels:
    app: k8s-host-db-demo
    part: inside-db
spec:
  type: ClusterIP
  ports:
      # port of pod to contact
    - targetPort: 2005
      # within the cluster (ClusterIP is ik anside-only)
      port: 2006
  selector:
    app: k8s-host-db-demo
    part: inside-db
---

apiVersion: apps/v1
kind: Deployment
# This describes the actual deployment:
metadata:
  name: inside-db-deployment
  labels:
    app: k8s-host-db-demo
    part: inside-db
spec:
  replicas: 1
  template:
    # This describes what pods to create:
    metadata:
      labels:
        app: k8s-host-db-demo
        part: inside-db
    spec:
      containers:
        - name: inside-db-pod
          image: mock-db
          imagePullPolicy: IfNotPresent
          env:
            - name: NAME
              value: Inside-DB
            - name: HOST
              value: '0.0.0.0'
            - name: PORT
              value: "2005"
  # This describes which pods are part of the deployment,
  # so this should match 'metadata' in almost all cases:
  selector:
    matchLabels:
      app: k8s-host-db-demo
      part: inside-db


## Start the mock client inside the cluster.
## Replace this by your application that uses the database.

---
apiVersion: apps/v1
kind: Deployment
# This describes the actual deployment:
metadata:
  name: mock-client-deployment
  labels:
    app: k8s-host-db-demo
    part: mock-client
spec:
  replicas: 1
  template:
    # This describes what pods to create:
    metadata:
      labels:
        app: k8s-host-db-demo
        part: mock-client
    spec:
      containers:
        - name: mock-client-pod
          image: mock-client
          imagePullPolicy: IfNotPresent
          env:
            - name: HOST
              value: '0.0.0.0'
            - name: PORT
              value: "8088"
  # This describes which pods are part of the deployment,
  # so this should match 'metadata' in almost all cases:
  selector:
    matchLabels:
      app: k8s-host-db-demo
      part: mock-client

## Expose the above client to the outside world, so we can see it.

---
apiVersion: v1
kind: Service
metadata:
  name: mock-client-service
  labels:
    app: k8s-host-db-demo
    part: mock-client
spec:
  type: LoadBalancer
  ports:
      # port of pod to contact
    - targetPort: 8088
      # within the cluster
      port: 8088
      # outside the cluster
      nodePort: 30001
  selector:
    app: k8s-host-db-demo
    part: mock-client

---
#apiVersion: networking.k8s.io/v1
## If Ingress is not recognized, update your Kubernetes version
#kind: Ingress
#metadata:
#  name: mock-client-ingress
#  annotations:
#    nginx.ingress.kubernetes.io/rewrite-target: /$1
#spec:
#  rules:
#    - host: local.example
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: mock-client-service
#                port:
#                  number: 8080
